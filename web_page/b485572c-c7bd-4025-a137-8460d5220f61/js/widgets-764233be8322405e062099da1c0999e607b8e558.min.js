
(function(){try{return angular.module('bonitasoft.ui.widgets');}catch(e){return angular.module('bonitasoft.ui.widgets',[]);}})().directive('pbTitle',function(){return{template:'<h1 ng-if="\'Level 1\' === properties.level" class="text-{{ properties.alignment }}">{{properties.text | uiTranslate}}</h1>\n<h2 ng-if="\'Level 2\' === properties.level" class="text-{{ properties.alignment }}">{{properties.text | uiTranslate}}</h2>\n<h3 ng-if="\'Level 3\' === properties.level" class="text-{{ properties.alignment }}">{{properties.text | uiTranslate}}</h3>\n<h4 ng-if="\'Level 4\' === properties.level" class="text-{{ properties.alignment }}">{{properties.text | uiTranslate}}</h4>\n<h5 ng-if="\'Level 5\' === properties.level" class="text-{{ properties.alignment }}">{{properties.text | uiTranslate}}</h5>\n<h6 ng-if="\'Level 6\' === properties.level" class="text-{{ properties.alignment }}">{{properties.text | uiTranslate}}</h6>\n'};});(function(){try{return angular.module('bonitasoft.ui.widgets');}catch(e){return angular.module('bonitasoft.ui.widgets',[]);}})().directive('pbText',function(){return{template:'<p class="text-{{ properties.alignment }}" ng-bind-html="properties.text | uiTranslate"></p>\n'};});(function(){try{return angular.module('bonitasoft.ui.widgets');}catch(e){return angular.module('bonitasoft.ui.widgets',[]);}})().directive('pbInput',function(){return{controllerAs:'ctrl',controller:function PbInputCtrl($scope,$log,widgetNameFactory){'use strict';this.name=widgetNameFactory.getName('pbInput');if(!$scope.properties.isBound('value')){$log.error('the pbInput property named "value" need to be bound to a variable');}},template:'<div ng-class="{\n    \'form-horizontal\': properties.labelPosition === \'left\' && !properties.labelHidden,\n    \'row\': properties.labelPosition === \'top\' && !properties.labelHidden || properties.labelHidden\n    }">\n    <div class="form-group">\n        <label\n            ng-if="!properties.labelHidden"\n            ng-class="{ \'control-label--required\': properties.required }"\n            class="control-label col-xs-{{ !properties.labelHidden && properties.labelPosition === \'left\' ? properties.labelWidth : 12 }}" ng-bind-html="properties.label | uiTranslate">\n        </label>\n        <div class="col-xs-{{ 12 - (!properties.labelHidden && properties.labelPosition === \'left\' ? properties.labelWidth : 0) }}">\n            <input\n                type="{{properties.type}}"\n                class="form-control"\n                placeholder="{{ properties.placeholder | uiTranslate }}"\n                ng-model="properties.value"\n                ng-model-options="{ allowInvalid: true }"\n                name="{{ctrl.name}}"\n                ng-required="properties.required"\n                ng-minlength="properties.minLength"\n                ng-maxlength="properties.maxLength"\n                min="{{properties.min}}"\n                max="{{properties.max}}"\n                step="{{properties.step}}"\n                ng-readonly="properties.readOnly">\n            <div ng-messages="$form[ctrl.name].$dirty && $form[ctrl.name].$error " ng-messages-include="forms-generic-errors.html" role="alert"></div>\n        </div>\n    </div>\n</div>\n'};});(function(){try{return angular.module('bonitasoft.ui.widgets');}catch(e){return angular.module('bonitasoft.ui.widgets',[]);}})().directive('pbFileViewer',function(){return{controllerAs:'ctrl',controller:function WidgetController($scope,$log,$location,$sce){var controller=this;$scope.$watch('[properties.document, properties.url]',function(){controller.fileName=getFileName();controller.loadDocument();},true);controller.loadDocument=function(){controller.document=null;if($scope.properties.document){if(angular.isArray($scope.properties.document)){$log.error('The documentViewer property named "document" should hold a single document. You might want to use documents[0]');}else if(angular.isObject($scope.properties.document)&&$scope.properties.document.id){controller.document=$scope.properties.document;}else{$log.error('The documentViewer property named "document" does not contain a Bonita document and cannot be rendered.');}}};controller.isPDF=function(){return['pdf'].indexOf(controller.extractFileExtension(controller.fileName))>-1;};controller.isImage=function(){return['png','jpg','jpeg','gif'].indexOf(controller.extractFileExtension(controller.fileName))>-1;};controller.getDocumentViewUrl=function(){if(isTypeProcessDocument()&&controller.document){if(isInitializedByAnExternalSystem(controller.document)){return controller.document.url;}
return'../API/formsDocumentImage?document='+controller.document.id;}else{return $scope.properties.url;}};controller.getTrustedDocumentViewUrl=function(){return $sce.trustAsResourceUrl(controller.getDocumentViewUrl());};controller.extractFileExtension=function(file){return file.split('?')[0].split('.').pop().toLowerCase();};function getFileName(){if(isTypeUrl()){return extractFileName($scope.properties.url);}
if(isInitializedByAnExternalSystem($scope.properties.document)){return extractFileName($scope.properties.document.url);}
return $scope.properties.document&&$scope.properties.document.fileName;}
function isTypeUrl(){return $scope.properties.type==='URL';}
function isTypeProcessDocument(){return $scope.properties.type==='Process document';}
function extractFileName(name){return name&&name.split('?')[0].split('/').pop();}
function isInitializedByAnExternalSystem(document){return document&&document.fileName==null;}},template:'<div ng-if="environment">\n  <div>\n    <a href="" class="FileViewer-fileName">{{ \'FileName\' | translate }}</a>\n  </div>\n  <div ng-if="properties.showPreview" class="img-responsive FileViewer-iconPreview"  >\n    <img class="img-responsive"  style="padding-top:10px;margin: auto;" src="data:image/svg+xml,%3Csvg%20viewBox%3D%270%200%2040%2020%27%20version%3D%271.1%27%20xmlns%3D%27http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%27%20xmlns%3Axlink%3D%27http%3A%2F%2Fwww.w3.org%2F1999%2Fxlink%27%20xml%3Aspace%3D%27preserve%27%20style%3D%27fill-rule%3Aevenodd%3Bclip-rule%3Aevenodd%3Bstroke-linejoin%3Around%3Bstroke-miterlimit%3A1.41421%3B%27%3E%3Cg%3E%3Cpath%20d%3D%27M11.75%2C19.775l-3.283%2C0c-0.52%2C0%20-0.942%2C-0.45%20-0.942%2C-1.005c0%2C-3.396%200%2C-14.415%200%2C-17.81c0%2C-0.555%200.422%2C-1.006%200.942%2C-1.006l8.468%2C0l5.69%2C6.105l0%2C2.841c-2.097%2C0%20-4.055%2C0.595%20-5.717%2C1.624l-6.544%2C0l0%2C1.508l4.628%2C0c-0.452%2C0.445%20-0.864%2C0.93%20-1.233%2C1.447l-3.395%2C0l0%2C1.508l2.496%2C0c-0.093%2C0.188%20-0.18%2C0.379%20-0.262%2C0.573c-0.155%2C0.282%20-0.288%2C0.574%20-0.394%2C0.876l-1.84%2C0l0%2C1.508l1.537%2C0l-0.002%2C0.029c-0.098%2C0.586%20-0.149%2C1.188%20-0.149%2C1.802ZM19.785%2C7.569l-9.421%2C0l0%2C1.508l9.421%2C0l0%2C-1.508ZM21.551%2C6.031l-4.734%2C-5.003c0%2C0%200%2C2.537%200%2C3.997c0%2C0.267%200.1%2C0.523%200.276%2C0.711c0.177%2C0.189%200.417%2C0.295%200.667%2C0.295l3.791%2C0Z%27%20style%3D%27fill%3A%23ccc%3B%27%2F%3E%3Cg%3E%3Cpath%20d%3D%27M16.648%2C16.683l-1.021%2C-1.037c2.211%2C-2.052%205.172%2C-3.307%208.424%2C-3.307c3.252%2C0%206.213%2C1.255%208.424%2C3.307l-1.021%2C1.037c-1.981%2C-1.9%20-4.571%2C-3.051%20-7.403%2C-3.051c-2.832%2C0%20-5.422%2C1.151%20-7.403%2C3.051Z%27%20style%3D%27fill%3A%23ccc%3B%27%2F%3E%3Cpath%20d%3D%27M19.052%2C17.849l-0.259%2C0.43c1.468%2C0.837%203.247%2C1.327%205.163%2C1.327c2%2C0%203.85%2C-0.533%205.353%2C-1.438l-0.255%2C-0.424c-1.456%2C0.815%20-3.21%2C1.29%20-5.098%2C1.29c-1.804%2C0%20-3.487%2C-0.435%20-4.904%2C-1.185Z%27%20style%3D%27fill%3A%23ccc%3B%27%2F%3E%3Cpath%20d%3D%27M24.06%2C12.353c1.587%2C0%202.876%2C1.289%202.876%2C2.876c0%2C1.587%20-1.289%2C2.876%20-2.876%2C2.876c-1.588%2C0%20-2.877%2C-1.289%20-2.877%2C-2.876c0%2C-1.587%201.289%2C-2.876%202.877%2C-2.876ZM25.244%2C14.174c0.582%2C0%201.055%2C0.473%201.055%2C1.055c0%2C0.582%20-0.473%2C1.055%20-1.055%2C1.055c-0.582%2C0%20-1.054%2C-0.473%20-1.054%2C-1.055c0%2C-0.582%200.472%2C-1.055%201.054%2C-1.055Z%27%20style%3D%27fill%3A%23ccc%3B%27%2F%3E%3C%2Fg%3E%3C%2Fg%3E%3C%2Fsvg%3E" alt="{{ \'File viewer icon\' | uiTranslate }}"/>\n  </div>\n</div>\n\n<div ng-if="!environment && ctrl.fileName">\n  <a class="FileViewer-fileName"\n     title="{{\'View\' | uiTranslate}} {{ ctrl.fileName || ctrl.getDocumentViewUrl() }}"\n     ng-if="ctrl.isImage() || ctrl.isPDF()"\n     ng-href="{{ctrl.getTrustedDocumentViewUrl()}}"\n     box-viewer>\n      {{ ctrl.fileName || ctrl.getDocumentViewUrl() }}\n  </a>\n  <a class="FileViewer-fileName"\n     title="{{\'Download\' | uiTranslate}} {{ ctrl.fileName || ctrl.getDocumentViewUrl() }}"\n     ng-if="!ctrl.isImage() && !ctrl.isPDF()"\n     ng-href="{{ctrl.getDocumentViewUrl()}}">\n      {{ ctrl.fileName || ctrl.getDocumentViewUrl() }}\n  </a>\n\n  <div ng-if="properties.showPreview && ctrl.isPDF()">\n    <iframe ng-src="{{ctrl.getTrustedDocumentViewUrl()}}" frameborder="0" class="document-iframe"></iframe>\n  </div>\n\n  <div ng-if="properties.showPreview && ctrl.isImage()">\n    <a title="{{ ctrl.fileName || ctrl.getDocumentViewUrl() }}"\n       box-viewer\n       ng-href="{{ctrl.getTrustedDocumentViewUrl()}}">\n      <img ng-src="{{ctrl.getTrustedDocumentViewUrl()}}"\n           alt="{{ \'File unavailable\' | translate }}"\n           class="FileViewer-img img-responsive"/>\n    </a>\n  </div>\n\n  <div ng-if="properties.showPreview && (!ctrl.isImage() && !ctrl.isPDF())">\n    <span class="FileViewer-previewNotAvailable" ui-translate>Preview is not available</span>\n  </div>\n</div>\n'};});(function(){try{return angular.module('bonitasoft.ui.widgets');}catch(e){return angular.module('bonitasoft.ui.widgets',[]);}})().directive('pbButton',function(){return{controllerAs:'ctrl',controller:function PbButtonCtrl($scope,$http,$location,$log,$window){'use strict';var vm=this;this.action=function action(){var id;if($scope.properties.action==='Remove from collection'){removeFromCollection();}else if($scope.properties.action==='Add to collection'){addToCollection();}else if($scope.properties.action==='Start process'){id=getUrlParam('id');if(id){doRequest('POST','../API/bpm/process/'+id+'/instantiation',getUserParam());}else{$log.log('Impossible to retrieve the process definition id value from the URL');}}else if($scope.properties.action==='Submit task'){id=getUrlParam('id');if(id){doRequest('POST','../API/bpm/userTask/'+getUrlParam('id')+'/execution',getUserParam());}else{$log.log('Impossible to retrieve the task id value from the URL');}}else if($scope.properties.url){doRequest($scope.properties.action,$scope.properties.url);}};function removeFromCollection(){if($scope.properties.collectionToModify){if(!Array.isArray($scope.properties.collectionToModify)){throw'Collection property for widget button should be an array, but was '+$scope.properties.collectionToModify;}
var index=-1;if($scope.properties.collectionPosition==='First'){index=0;}else if($scope.properties.collectionPosition==='Last'){index=$scope.properties.collectionToModify.length-1;}else if($scope.properties.collectionPosition==='Item'){index=$scope.properties.collectionToModify.indexOf($scope.properties.removeItem);}
if(index!==-1){$scope.properties.collectionToModify.splice(index,1);}}}
function addToCollection(){if(!$scope.properties.collectionToModify){$scope.properties.collectionToModify=[];}
if(!Array.isArray($scope.properties.collectionToModify)){throw'Collection property for widget button should be an array, but was '+$scope.properties.collectionToModify;}
var item=angular.copy($scope.properties.valueToAdd);if($scope.properties.collectionPosition==='First'){$scope.properties.collectionToModify.unshift(item);}else{$scope.properties.collectionToModify.push(item);}}
function doRequest(method,url,params){vm.busy=true;var req={method:method,url:url,data:angular.copy($scope.properties.dataToSend),params:params};return $http(req).success(function(data,status){$scope.properties.dataFromSuccess=data;notifyParentFrame({message:'success',status:status,dataFromSuccess:data});if($scope.properties.targetUrlOnSuccess&&method!=='GET'){redirectIfNeeded();}}).error(function(data,status){$scope.properties.dataFromError=data;notifyParentFrame({message:'error',status:status,dataFromError:data});}).finally(function(){vm.busy=false;});}
function redirectIfNeeded(){var iframeId=$window.frameElement?$window.frameElement.id:null;if(!iframeId||iframeId&&iframeId.indexOf('bonitaframe')!==0){$window.location.assign($scope.properties.targetUrlOnSuccess);}}
function notifyParentFrame(additionalProperties){if($window.parent!==$window.self){var dataToSend=angular.extend({},$scope.properties,additionalProperties);$window.parent.postMessage(JSON.stringify(dataToSend),'*');}}
function getUserParam(){var userId=getUrlParam('user');if(userId){return{'user':userId};}
return{};}
function getUrlParam(param){var paramValue=$location.absUrl().match('[//?&]'+param+'=([^&#]*)($|[&#])');if(paramValue){return paramValue[1];}
return'';}},template:'<div class="text-{{ properties.alignment }}">\n    <button\n        ng-class="\'btn btn-\' + properties.buttonStyle"\n        ng-click="ctrl.action()"\n        type="button"\n        ng-disabled="properties.disabled || ctrl.busy" ng-bind-html="properties.label | uiTranslate"></button>\n</div>\n'};});(function(){try{return angular.module('bonitasoft.ui.widgets');}catch(e){return angular.module('bonitasoft.ui.widgets',[]);}})().directive('pbFormContainer',function(){return{template:''};});(function(){try{return angular.module('bonitasoft.ui.widgets');}catch(e){return angular.module('bonitasoft.ui.widgets',[]);}})().directive('pbUpload',function(){return{controllerAs:'ctrl',controller:function PbUploadCtrl($scope,$sce,$element,widgetNameFactory,$timeout,$log,gettextCatalog){var ctrl=this;this.name=widgetNameFactory.getName('pbInput');this.filename='';this.filemodel='';this.clear=clear;this.startUploading=startUploading;this.uploadError=uploadError;this.uploadComplete=uploadComplete;this.name=widgetNameFactory.getName('pbUpload');this.preventFocus=function($event){$event.target.blur();};this.submitForm=function(){var form=$element.find('form');form.triggerHandler('submit');form[0].submit();};this.forceSubmit=function(event){if(!event.target.value){return;}
ctrl.submitForm();event.target.value=null;};var input=$element.find('input');input.on('change',ctrl.forceSubmit);$scope.$on('$destroy',function(){input.off('change',ctrl.forceSubmit);});$scope.$watch('properties.url',function(newUrl,oldUrl){ctrl.url=$sce.trustAsResourceUrl(newUrl);if(newUrl===undefined){$log.warn('you need to define a url for pbUpload');}});$scope.$watch(function(){return $scope.properties.value;},function(newValue){if(newValue&&newValue.filename){ctrl.filemodel=true;ctrl.filename=newValue.filename;}else if(!angular.isDefined(newValue)){delete ctrl.filemodel;delete ctrl.filename;}});if(!$scope.properties.isBound('value')){$log.error('the pbUpload property named "value" need to be bound to a variable');}
function clear(){ctrl.filename='';ctrl.filemodel='';$scope.properties.value={};}
function uploadError(error){$log.warn('upload fails too',error);ctrl.filemodel='';ctrl.filename=gettextCatalog.getString('Upload failed');}
function startUploading(){ctrl.filemodel='';ctrl.filename=gettextCatalog.getString('Uploading...');}
function uploadComplete(response){if(angular.isString(response)||(response&&response.type&&response.message)){$log.warn('upload failed');ctrl.filemodel='';ctrl.filename=gettextCatalog.getString('Upload failed');$scope.properties.errorContent=angular.isString(response)?response:response.message;return;}
$scope.properties.value=response;}},template:'<div ng-class="{\n    \'form-horizontal\': properties.labelPosition === \'left\' && !properties.labelHidden,\n    \'row\': properties.labelPosition === \'top\' && !properties.labelHidden || properties.labelHidden\n    }">\n    <div class="form-group">\n        <label\n            ng-if="!properties.labelHidden"\n            ng-class="{ \'control-label--required\': properties.required }"\n            class="control-label col-xs-{{ !properties.labelHidden && properties.labelPosition === \'left\' ? properties.labelWidth : 12 }}">\n            {{ properties.label | uiTranslate }}\n        </label>\n        <div class="col-xs-{{ 12 - (!properties.labelHidden && properties.labelPosition === \'left\' ? properties.labelWidth : 0) }}">\n           <form action="{{ctrl.url}}"\n                 ng-upload="ctrl.uploadComplete(content)"\n                 ng-upload-loading="ctrl.startUploading()"\n                 error-catcher="ctrl.uploadError(error)"\n                 upload-options-enable-csrf\n                 upload-options-csrf-param="CSRFToken">\n                <div class="input-group file-upload">\n                    <input type="text" ng-focus="ctrl.preventFocus($event)" placeholder="{{properties.placeholder | uiTranslate}}" value="{{ctrl.filename}}" class="form-control">\n\n                    <button type="button" ng-if="ctrl.filemodel" ng-click="ctrl.clear()" class="file-upload-clear">\n                        <i class="glyphicon glyphicon-remove-circle"></i>\n                        <span class="hide" translate>Close</span>\n                    </button>\n                    <span class="input-group-btn">\n                        <span class="btn" ng-class="{\'btn-default disabled\':$isUploading, \'btn-primary\':!$isUploading}">\n                            <input class="file-upload-input"\n                                   ng-class="{\'file-upload-input--disabled\':$isUploading}"\n                                   name="{{ctrl.name}}" type="file"\n                                   ng-required="properties.required"\n                                   ng-model="ctrl.filemodel" />\n                            <i class="glyphicon" ng-class="{\'glyphicon-cloud-upload\':$isUploading, \'glyphicon-paperclip\':!$isUploading}"></i>\n                        </span>\n                    </span>\n                </div>\n            </form>\n            <div ng-messages="$form[ctrl.name].$dirty && $form[ctrl.name].$error " ng-messages-include="forms-generic-errors.html" role="alert"></div>\n        </div>\n    </div>\n</div>\n'};});